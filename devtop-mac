#!/usr/bin/env bash

##############################################
# Welcome to the mac developer laptop script!
# Be prepared to turn your laptop (or desktop)
# into an awesome development machine.
##############################################

##############################################
#  Common bash setting and script functions
##############################################

#----------------------------------------------
# Configure the mac environment
#----------------------------------------------
defaults write com.apple.finder AppleShowAllFiles YES; # show hidden files
defaults write com.apple.dock persistent-apps -array; # remove icons in Dock
defaults write com.apple.dock tilesize -int 36; # smaller icon sizes in Dock
defaults write com.apple.dock autohide -bool true; # turn Dock auto-hidng on
defaults write com.apple.dock autohide-delay -float 0; # remove Dock show delay
defaults write com.apple.dock autohide-time-modifier -float 0; # remove Dock show delay
defaults write com.apple.dock orientation left; # Dock on the left side of screen
defaults write NSGlobalDomain AppleShowAllExtensions -bool true; # show all file extensions
# Save screenshots to the desktop
mkdir $HOME/Screenshots/
defaults write com.apple.screencapture location -string “$HOME/Screenshots/”
# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
defaults write com.apple.screencapture type png
# Display full POSIX path as Finder window title
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
# Display advance options for disk utility
defaults write com.apple.DiskUtility advanced-image-options 1
killall Dock 2>/dev/null;
killall Finder 2>/dev/null;

#----------------------------------------------
# Configure the shell
#----------------------------------------------
# Some specific hygine settings to configure the shell
shopt -s extglob
set -o errtrace
set -o errexit
# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT
# Die on failures
set -e
# set -x

# Default setting for file, directory locations (can be customized), recommend to leave the defaults.
HOME_GOLANG=$HOME/code/golang
HOME_BIN=$HOME/.bin/
HOME_ZSHRC=$HOME/.zshrc
HOME_PROFILE=$HOME/.profile
HOME_OHMYZSH=$HOME/.oh-my-zsh
HOME_NVM=$HOME/.nvm


#----------------------------------------------
# Functions for this shell
#----------------------------------------------
# Verify if the given command works/exists
command_exists () {
  type "$1" &> /dev/null ;
}
# Fancy echo helps to print the output to console
fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}
# Logging functions
log()  { printf "%b\n" "$*"; }
debug(){ log "\nDEBUG: $*\n" ; }
fail() { log "\nERROR: $*\n" ; exit 1 ; }
download(){
  # do not fail, silent, ShowError, follow redirects, specify file name
  fancy_echo "Inside download, about to curl ... %s" "$1"
  curl -fsSL $1
}
#Create or append zshrc and any text files.
append_to_file() {
  local file="$1"
  local text="$2"

  if [ "$file" = "$HOME_ZSHRC" ]; then
    if [ -w "$HOME/.zshrc.local" ]; then
      file="$HOME/.zshrc.local"
    else
      file="$HOME_ZSHRC"
    fi
  fi

  if ! grep -Fqs "$text" "$file"; then
    printf "\n%s\n" "$text" >> "$file"
  fi
}

#Init for this script
# Install bash min version, zsh and make zsh as default shell for the system.
init(){
# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.osx` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

  if [ ! -f "$HOME/.mkshrc" ]; then
    touch ~/.mkshrc
    sudo chmod 770 ~/.mkshrc
  fi
  if [ ! -f "$HOME_PROFILE" ]; then
    touch ~/.profile
    sudo chmod 770 ~/.profile
  fi
  if [ ! -f "$HOME_ZSHRC" ]; then
    touch ~/.bashrc ~/.bash_profile ~/.zshrc ~/.zlogin
    sudo chmod 770 ~/.bashrc ~/.bash_profile ~/.zshrc ~/.zlogin
  fi
  BASH_MIN_VERSION="3.2.25"
    if
      [[ -n "${BASH_VERSION:-}" &&
        "$(\printf "%b" "${BASH_VERSION:-}\n${BASH_MIN_VERSION}\n" | LC_ALL=C \sort -t"." -k1,1n -k2,2n -k3,3n | \head -n1)" != "${BASH_MIN_VERSION}"
      ]]
    then
      fancy_echo "BASH ${BASH_MIN_VERSION} required (you have $BASH_VERSION)"
      exit 1
    fi
  if [ ! -d "$HOME_BIN" ]; then
    mkdir "$HOME_BIN"
  fi

  if [ ! -f "$HOME_ZSHRC" ]; then
    touch "$HOME_ZSHRC"
  fi

  if [ ! -d "$HOME_GOLANG" ]; then
    mkdir "$HOME_GOLANG"
  fi

  case "$SHELL" in
    */zsh) : ;;
    *)
      fancy_echo "Changing your shell to zsh ..."
        chsh -s /bin/zsh
      ;;
  esac
}
# <TODO>: Usage for this script and options
# https://gist.github.com/cosimo/3760587
# http://unix.stackexchange.com/questions/230457/how-to-skip-the-first-argument-in-a-script
#http://wiki.bash-hackers.org/scripting/posparams
# http://wiki.bash-hackers.org/howto/getopts_tutorial
# http://stackoverflow.com/questions/16483119/example-of-how-to-use-getopts-in-bash

usage()
{
  printf "%b" "

Usage
  mac_app_install.sh

"
}
install_ohmyzsh(){
  if [ ! -d "$HOME_OHMYZSH" ]; then
    fancy_echo "Installing oh-my-zsh ... ..."
    curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
  else
    fancy_echo "oh-my-zsh already installed. Skipping ..."
  fi

}

install_xcode() {

  # Install X code
  xcodeCmd="xcode-select -p"
  # Get and install Xcode CLI tools
  OSX_VERS=$(sw_vers -productVersion | awk -F "." '{print $2}')
  #Reference:
  #https://github.com/timsutton/osx-vm-templates/blob/ce8df8a7468faa7c5312444ece1b977c1b2f77a4/scripts/xcode-cli-tools.sh
  #https://github.com/chcokr/osx-init/blob/master/install.sh
  if ! command_exists $xcodeCmd; then
    fancy_echo "About to install xcode CommandLineTools ....."
    # on 10.9+, we can leverage SUS to get the latest CLI tools
    if [ "$OSX_VERS" -ge 9 ]; then
      fancy_echo "OSX_VERS > 9 install CommandLineTools ....."
      # create the placeholder file that's checked by CLI updates' .dist code
      # in Apple's SUS catalog
      touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
      # find the CLI Tools update
      PROD=$(softwareupdate -l | grep "\*.*Command Line" | head -n 1 | awk -F"*" '{print $2}' | sed -e 's/^ *//' | tr -d '\n')
      # install it
      softwareupdate -i "$PROD" -v
      xcodebuild -license
    # on 10.7/10.8, we instead download from public download URLs, which can be found in
    # the dvtdownloadableindex:
    # https://devimages.apple.com.edgekey.net/downloads/xcode/simulators/index-3905972D-B609-49CE-8D06-51ADC78E07BC.dvtdownloadableindex
    else
      [ "$OSX_VERS" -eq 7 ] && DMGURL=http://devimages.apple.com.edgekey.net/downloads/xcode/command_line_tools_for_xcode_os_x_lion_april_2013.dmg
      [ "$OSX_VERS" -eq 8 ] && DMGURL=http://devimages.apple.com.edgekey.net/downloads/xcode/command_line_tools_for_osx_mountain_lion_april_2014.dmg
      fancy_echo "OSX_VERS <=7 or 8 install CommandLineTools ....."
      TOOLS=clitools.dmg
      curl "$DMGURL" -o "$TOOLS"
      TMPMOUNT=`/usr/bin/mktemp -d /tmp/clitools.XXXX`
      hdiutil attach "$TOOLS" -mountpoint "$TMPMOUNT"
      installer -pkg "$(find $TMPMOUNT -name '*.mpkg')" -target /
      hdiutil detach "$TMPMOUNT"
      rm -rf "$TMPMOUNT"
      rm "$TOOLS"
      exit
    fi
  else
    echo "=== XCode CommandLineTools Installed at... `$xcodeCmd`"
  fi

}

install_alcatraz(){
  if [ ! -f ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin ]; then
    fancy_echo "Installing Alcatraz, package manager for Xcode ..."
    # http://alcatraz.io/
    curl -fsSL https://raw.githubusercontent.com/supermarin/Alcatraz/deploy/Scripts/install.sh | sh
  else
    fancy_echo "Alcatraz, package manager for Xcode already install. Skipping ..."
  fi
}

install_homebrew(){
  if ! command -v brew >/dev/null; then
    fancy_echo "Installing Homebrew ..."
    # Mac OS X Yosemite includes Ruby 2.0.0p481, so we will use this to install Homebrew
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    # shellcheck disable=SC2016
    append_to_file "$HOME_ZSHRC" 'export PATH="/usr/local/bin:$PATH"'
    sudo mkdir -p /opt/homebrew-cask
    sudo chmod -R 770 /opt/homebrew-cask
    brew tap homebrew/bundle
  else
    fancy_echo "Homebrew already installed. Skipping ..."
  fi
}

install_rrcup(){
  #Reference: https://github.com/thoughtbot/dotfiles
  dotfiles_url="https://github.com/softmentor/laptop.git"
  #Git clone all the dot files
  if [ ! -d "$HOME/laptop/" ]; then
    fancy_echo "Cloning laptop"
    git clone $dotfiles_url ~/laptop
    pushd ~/laptop
    fancy_echo "Moving to laptop ..."
    git checkout master
    git pull
    popd
  else
    fancy_echo "Moving to laptop ..."
    pushd ~/laptop
    git fetch
    git pull
    popd
  fi
  if ! command -v rcup >/dev/null; then
    fancy_echo "Installing RCM for dotfiles ..."
    RCRC=$HOME/laptop/dotfiles/rcrc
    brew tap thoughtbot/formulae
    brew install rcm
    sudo rcup -d ~/laptop/dotfiles -v
  else
    fancy_echo "RCM for dotfiles already installed. Skipping install, updating ..."
    sudo rcup -d ~/laptop/dotfiles -v
  fi
}

install_rvm(){
  if ! command -v rbenv >/dev/null; then
    if ! command -v rvm >/dev/null; then
      fancy_echo "Installing RVM and the latest Ruby..."
      curl -L https://get.rvm.io | bash -s stable --ruby --auto-dotfiles --autolibs=enable
      . ~/.rvm/scripts/rvm
      #Fixing this issue for zsh
      #http://stackoverflow.com/questions/27784961/received-warning-message-path-set-to-rvm-after-updating-ruby-version-using-rvm
      # https://github.com/rvm/rvm/issues/3212
      #append_to_file "$HOME/.zshrc" 'export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting'
      # Verify RVM installation by running, which returns 'rvm is a function'
      type rvm | head -1
      fancy_echo "Verified rvm is a function ....."
      #Installing few more rubies with rvm
      rvm list
      #rvm get stable
      rvm install 1.9.3-p194
      rvm install 2.0.0
      rvm install 2.2.2
      # for octopress
      #rvm use 1.9.3-p194
      rvm use 2.0.0
      rvm use ruby-head
      rvm use 2.2.2
      rvm default 2.2.2
      # To prevent warnings, trust the rvmrc file
      # Refer: https://rvm.io/workflow/projects
      # http://stackoverflow.com/questions/15708916/use-rvmrc-or-ruby-version-file-to-set-a-project-gemset-with-rvm
      rvm rvmrc trust ~/.rvmrc
    else
      fancy_echo "RVM already installed ..."
      local_version="$(rvm -v 2> /dev/null | awk '$2 != ""{print $2}')"
      latest_version="$(curl -s https://raw.githubusercontent.com/wayneeseguin/rvm/stable/VERSION)"
      if [ "$local_version" != "$latest_version" ]; then
        fancy_echo "Upgrading RVM..."
        rvm get stable --auto-dotfiles --autolibs=enable --with-gems="bundler"
        fancy_echo "Upgrading RVM gemset ...."
        rvm rubygems current
      else
        fancy_echo "Already using the latest version of RVM. Skipping..."
      fi
    fi
  fi
}

install_nvm(){
  if command -v node >/dev/null; then
    fancy_echo "Node is already installed. Attempting to brew uninstall node ..."
    # Node is present so uninstall that first before installing nvm
    brew uninstall --force node
  fi
  #if nvm directory already present, remove it.
  if ! command -v nvm >/dev/null; then
    if [ ! -d "$HOME_NVM" ]; then
      pushd "$HOME_NVM/"
      if [! git rev-parse --is-inside-work-tree]; then
        fancy_echo "NVM installed folder is not git controlled. Deleting ..."
        # This is a not a git directory
        rm -rf "$HOME_NVM/"
        # we will not install nvm via brew, as it has many issues.
        # use the instructions as mention by nvm dev.
        fancy_echo "NVM not installed. Installing ..."
        git clone https://github.com/creationix/nvm.git ~/.nvm
        git checkout -b `git describe --abbrev=0 --tags`
      fi
      popd
    fi
    fancy_echo "NVM already installed. Configuring node version ..."
    source $HOME_NVM/nvm.sh
    nvm install node
    nvm alias default node
  else
    fancy_echo "Already using the latest version of NVM. Skipping, just updating..."
    # NVM already installed just update.
    pushd $HOME_NVM
    git pull
    popd
  fi

}

install_npm_global_pkg(){
  #update npm to latest
  fancy_echo "Updating the latest version of npm package manager ..."
  npm install -g npm@latest
  npm install -g nodemon
  npm install -g node-inspector

  # application dev
  npm install -g underscore
  npm install -g express
  npm install -g http-server
  npm install -g eslint

  # testing
  npm install -g protractor
  # build, package, tools
  npm install -g gulp
  npm install -g gulp-protractor
  npm install -g grunt-cli
  npm install -g bower
  #typescript
  npm install -g typescript
  npm install -g typings
  npm install -g tsd
  #gitbooks for docs
  # http://toolchain.gitbook.com/setup.html
  npm install -g gitbook-cli

  #angular2 development
  npm install -g angular-cli
}

#Install or update ruby gems from a list of items.
install_ruby_gem() {
  if gem list "$1" | grep "^$1 ("; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
    fancy_echo "Configuring Bundler ..."
    number_of_cores=$(sysctl -n hw.ncpu)
    bundle config --global jobs $((number_of_cores - 1))
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
    if [ ! -d "$HOME/.gem/" ]; then
      sudo chmod -R 770 $HOME/.gem/
    fi
  fi
}
update_gem_packages(){
  # Update Ruby & gems
  # NOTE: RubyGems 1.1 and 1.2 have problems upgrading when there is no rubygems-update installed.
  # You will need to use the following instructions if you see Nothing to update. 
  # If you have an older version of RubyGems installed, then you can still do it in two steps:
  # Steps: brew uninstall ruby
  # sudo gem update —system
  gem update —system
  gem update
}

update_npm_packages(){
  # Update npm & packages
  npm install npm -g
  npm update -g
}

#----------------------------------------------
# End of Functions for this shell
#----------------------------------------------

##############################################
#  Start executing the main steps
##############################################

# Initialize, configure and change the shell to zsh.
fancy_echo "Initialize your shell to zsh and oh-my-zsh..."
fancy_echo "================================================================="
init
fancy_echo "Installing oh-my-zsh ..."
install_ohmyzsh
fancy_echo "Installing/Upgrading XCode ..."
fancy_echo "================================================================="
install_xcode
fancy_echo "Installing/Upgrading Alcatraz ..."
fancy_echo "================================================================="
#install_alcatraz
fancy_echo "Installing/Upgrading homebrew ..."
fancy_echo "================================================================="
install_homebrew
fancy_echo "Installing/Upgrading rcup ..."
fancy_echo "================================================================="
install_rrcup
fancy_echo "Installing/Upgrading rvm ..."
fancy_echo "================================================================="
install_rvm
fancy_echo "Installing/Upgrading ruby_gem ..."
fancy_echo "================================================================="
update_gem_packages
install_ruby_gem 'bundler'
install_ruby_gem 'cocoapods'
fancy_echo "Installing/Upgrading nvm ..."
fancy_echo "================================================================="
install_nvm
fancy_echo "Installing/Upgrading npm packages ..."
fancy_echo "================================================================="
#install_npm_global_pkg

#update_npm_packages

#########################################################
#  Start installing all applications using homebrew
#########################################################
# We will use the brew file method to install all required command-line tools
# More details here: https://robots.thoughtbot.com/brewfile-a-gemfile-but-for-homebrew
# Don't have time to go through the reference, just follow the instructions below
# To use the Brewfile, tap homebrew/bundle (one time)
fancy_echo "Start Brewing with Brewfiles ..."
#Cleanup and get ready to install the latest and greatest
brew update
brew cleanup
brew cask cleanup

# use the Brewfile which has all required tools
fancy_echo "Installing/Upgrading Brewfile-common ..."
fancy_echo "================================================================="
brew bundle --file=Brewfile-common
fancy_echo "Installing/Upgrading Brewfile-app-dev ..."
fancy_echo "================================================================="
brew bundle --file=Brewfile-app-dev

# Update App Store apps
#sudo softwareupdate -i -a

#if [ -f "$HOME/.laptop.local" ]; then
#  . "$HOME/.laptop.local"
#fi

#if [ ! -f "$HOME/.ssh/github_rsa.pub" ]; then
#  open ~/Applications/GitHub.app
#fi
